package com.github.sp00m.colalo;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;

import static java.util.Arrays.stream;
import static java.util.function.Function.identity;
import static java.util.stream.Collectors.collectingAndThen;
import static java.util.stream.Collectors.toMap;

// https://www.wikiwand.com/en/ISO_639
// https://www.wikiwand.com/en/List_of_ISO_639-1_codes
public enum Language {

    ;

    public enum Family {

        AFRO_ASIATIC("Afro-Asiatic"),
        ALGONQUIAN("Algonquian"),
        AUSTROASIATIC("Austroasiatic"),
        AUSTRONESIAN("Austronesian"),
        AYMARAN("Aymaran"),
        CONSTRUCTED("Constructed"),
        CREOLE("Creole"),
        DENE_YENISEIAN("Dené–Yeniseian"),
        DRAVIDIAN("Dravidian"),
        ESKIMO_ALEUT("Eskimo–Aleut"),
        INDO_EUROPEAN("Indo-European"),
        JAPONIC("Japonic"),
        KOREANIC("Koreanic"),
        LANGUAGE_ISOLATE("Language isolate"),
        MONGOLIC("Mongolic"),
        NIGER_CONGO("Niger–Congo"),
        NILO_SAHARAN("Nilo-Saharan"),
        NORTHEAST_CAUCASIAN("Northeast Caucasian"),
        NORTHWEST_CAUCASIAN("Northwest Caucasian"),
        QUECHUAN("Quechuan"),
        SINO_TIBETAN("Sino-Tibetan"),
        SOUTH_CAUCASIAN("South Caucasian"),
        TAI_KADAI("Tai–Kadai"),
        TUPIAN("Tupian"),
        TURKIC("Turkic"),
        URALIC("Uralic");

        private final String name;

        Family(String name) {
            this.name = name;
        }

        public final String getName() {
            return name;
        }

    }

    public enum Alpha2 {

        AA,
        AB,
        AE,
        AF,
        AK,
        AM,
        AN,
        AR,
        AS,
        AV,
        AY,
        AZ,
        BA,
        BE,
        BG,
        BH,
        BI,
        BM,
        BN,
        BO,
        BR,
        BS,
        CA,
        CE,
        CH,
        CO,
        CR,
        CS,
        CU,
        CV,
        CY,
        DA,
        DE,
        DV,
        DZ,
        EE,
        EL,
        EN,
        EO,
        ES,
        ET,
        EU,
        FA,
        FF,
        FI,
        FJ,
        FO,
        FR,
        FY,
        GA,
        GD,
        GL,
        GN,
        GU,
        GV,
        HA,
        HE,
        HI,
        HO,
        HR,
        HT,
        HU,
        HY,
        HZ,
        IA,
        ID,
        IE,
        IG,
        II,
        IK,
        IO,
        IS,
        IT,
        IU,
        JA,
        JV,
        KA,
        KG,
        KI,
        KJ,
        KK,
        KL,
        KM,
        KN,
        KO,
        KR,
        KS,
        KU,
        KV,
        KW,
        KY,
        LA,
        LB,
        LG,
        LI,
        LN,
        LO,
        LT,
        LU,
        LV,
        MG,
        MH,
        MI,
        MK,
        ML,
        MN,
        MR,
        MS,
        MT,
        MY,
        NA,
        NB,
        ND,
        NE,
        NG,
        NL,
        NN,
        NO,
        NR,
        NV,
        NY,
        OC,
        OJ,
        OM,
        OR,
        OS,
        PA,
        PI,
        PL,
        POX,
        PS,
        PT,
        QU,
        RM,
        RN,
        RO,
        RU,
        RW,
        SA,
        SC,
        SD,
        SE,
        SG,
        SI,
        SK,
        SL,
        SM,
        SN,
        SO,
        SQ,
        SR,
        SS,
        ST,
        SU,
        SV,
        SW,
        TA,
        TE,
        TG,
        TH,
        TI,
        TK,
        TL,
        TN,
        TO,
        TR,
        TS,
        TT,
        TW,
        TY,
        UG,
        UK,
        UR,
        UZ,
        VE,
        VI,
        VO,
        WA,
        WO,
        XH,
        YI,
        YO,
        ZA,
        ZH,
        ZU;

        private static final Map<String, Alpha2> BY_CODE = stream(values())
                .collect(collectingAndThen(toMap(Alpha2::getCode, identity()), Collections::unmodifiableMap));

        private final String code;

        Alpha2() {
            this.code = name().toLowerCase();
        }

        public final String getCode() {
            return code;
        }

        public static Optional<Alpha2> getByCode(String code) {
            return Optional.ofNullable(BY_CODE.get(code.toLowerCase()));
        }

    }

    public enum Alpha3T {

        AAR,
        ABK,
        AFR,
        AKA,
        AMH,
        ARA,
        ARG,
        ASM,
        AVA,
        AVE,
        AYM,
        AZE,
        BAK,
        BAM,
        BEL,
        BEN,
        BIH,
        BIS,
        BOD,
        BOS,
        BRE,
        BUL,
        CAT,
        CES,
        CHA,
        CHE,
        CHU,
        CHV,
        COR,
        COS,
        CRE,
        CYM,
        DAN,
        DEU,
        DIV,
        DZO,
        ELL,
        ENG,
        EPO,
        EST,
        EUS,
        EWE,
        FAO,
        FAS,
        FIJ,
        FIN,
        FRA,
        FRY,
        FUL,
        GLA,
        GLE,
        GLG,
        GLV,
        GRN,
        GUJ,
        HAT,
        HAU,
        HEB,
        HER,
        HIN,
        HMO,
        HRV,
        HUN,
        HYE,
        IBO,
        IDO,
        III,
        IKU,
        ILE,
        INA,
        IND,
        IPK,
        ISL,
        ITA,
        JAV,
        JPN,
        KAL,
        KAN,
        KAS,
        KAT,
        KAU,
        KAZ,
        KHM,
        KIK,
        KIN,
        KIR,
        KOM,
        KON,
        KOR,
        KUA,
        KUR,
        LAO,
        LAT,
        LAV,
        LIM,
        LIN,
        LIT,
        LTZ,
        LUB,
        LUG,
        MAH,
        MAL,
        MAR,
        MKD,
        MLG,
        MLT,
        MON,
        MRI,
        MSA,
        MYA,
        NAU,
        NAV,
        NBL,
        NDE,
        NDO,
        NEP,
        NLD,
        NNO,
        NOB,
        NOR,
        NYA,
        OCI,
        OJI,
        ORI,
        ORM,
        OSS,
        PAN,
        PLI,
        POL,
        POR,
        PUS,
        QUE,
        ROH,
        RON,
        RUN,
        RUS,
        SAG,
        SAN,
        SIN,
        SLA,
        SLK,
        SLV,
        SME,
        SMO,
        SNA,
        SND,
        SOM,
        SOT,
        SPA,
        SQI,
        SRD,
        SRP,
        SSW,
        SUN,
        SWA,
        SWE,
        TAH,
        TAM,
        TAT,
        TEL,
        TGK,
        TGL,
        THA,
        TIR,
        TON,
        TSN,
        TSO,
        TUK,
        TUR,
        TWI,
        UIG,
        UKR,
        URD,
        UZB,
        VEN,
        VIE,
        VOL,
        WLN,
        WOL,
        XHO,
        YID,
        YOR,
        ZHA,
        ZHO,
        ZUL;

        private static final Map<String, Alpha3T> BY_CODE = stream(values())
                .collect(collectingAndThen(toMap(Alpha3T::getCode, identity()), Collections::unmodifiableMap));

        private final String code;

        Alpha3T() {
            this.code = name().toLowerCase();
        }

        public final String getCode() {
            return code;
        }

        public static Optional<Alpha3T> getByCode(String code) {
            return Optional.ofNullable(BY_CODE.get(code.toLowerCase()));
        }

    }

    public enum Alpha3B {

        AAR,
        ABK,
        AFR,
        AKA,
        ALB,
        AMH,
        ARA,
        ARG,
        ARM,
        ASM,
        AVA,
        AVE,
        AYM,
        AZE,
        BAK,
        BAM,
        BAQ,
        BEL,
        BEN,
        BIH,
        BIS,
        BOS,
        BRE,
        BUL,
        BUR,
        CAT,
        CHA,
        CHE,
        CHI,
        CHU,
        CHV,
        COR,
        COS,
        CRE,
        CZE,
        DAN,
        DIV,
        DUT,
        DZO,
        ENG,
        EPO,
        EST,
        EWE,
        FAO,
        FIJ,
        FIN,
        FRE,
        FRY,
        FUL,
        GEO,
        GER,
        GLA,
        GLE,
        GLG,
        GLV,
        GRE,
        GRN,
        GUJ,
        HAT,
        HAU,
        HEB,
        HER,
        HIN,
        HMO,
        HRV,
        HUN,
        IBO,
        ICE,
        IDO,
        III,
        IKU,
        ILE,
        INA,
        IND,
        IPK,
        ITA,
        JAV,
        JPN,
        KAL,
        KAN,
        KAS,
        KAU,
        KAZ,
        KHM,
        KIK,
        KIN,
        KIR,
        KOM,
        KON,
        KOR,
        KUA,
        KUR,
        LAO,
        LAT,
        LAV,
        LIM,
        LIN,
        LIT,
        LTZ,
        LUB,
        LUG,
        MAC,
        MAH,
        MAL,
        MAO,
        MAR,
        MAY,
        MLG,
        MLT,
        MON,
        NAU,
        NAV,
        NBL,
        NDE,
        NDO,
        NEP,
        NNO,
        NOB,
        NOR,
        NYA,
        OCI,
        OJI,
        ORI,
        ORM,
        OSS,
        PAN,
        PER,
        PLI,
        POL,
        POR,
        PUS,
        QUE,
        ROH,
        RUM,
        RUN,
        RUS,
        SAG,
        SAN,
        SIN,
        SLA,
        SLO,
        SLV,
        SME,
        SMO,
        SNA,
        SND,
        SOM,
        SOT,
        SPA,
        SRD,
        SRP,
        SSW,
        SUN,
        SWA,
        SWE,
        TAH,
        TAM,
        TAT,
        TEL,
        TGK,
        TGL,
        THA,
        TIB,
        TIR,
        TON,
        TSN,
        TSO,
        TUK,
        TUR,
        TWI,
        UIG,
        UKR,
        URD,
        UZB,
        VEN,
        VIE,
        VOL,
        WEL,
        WLN,
        WOL,
        XHO,
        YID,
        YOR,
        ZHA,
        ZUL;

        private static final Map<String, Alpha3B> BY_CODE = stream(values())
                .collect(collectingAndThen(toMap(Alpha3B::getCode, identity()), Collections::unmodifiableMap));

        private final String code;

        Alpha3B() {
            this.code = name().toLowerCase();
        }

        public final String getCode() {
            return code;
        }

        public static Optional<Alpha3B> getByCode(String code) {
            return Optional.ofNullable(BY_CODE.get(code.toLowerCase()));
        }

    }

}
